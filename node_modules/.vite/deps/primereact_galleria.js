"use client";
import {
  ChevronLeftIcon
} from "./chunk-WW2475QP.js";
import {
  ChevronRightIcon
} from "./chunk-JZYJPTLJ.js";
import {
  ChevronDownIcon,
  ChevronUpIcon
} from "./chunk-6VUX5JPG.js";
import {
  TimesIcon
} from "./chunk-6ADRAOCJ.js";
import {
  CSSTransition
} from "./chunk-DPJDEMVL.js";
import "./chunk-UJOFSA2E.js";
import {
  Ripple
} from "./chunk-JPSDDVIJ.js";
import "./chunk-DHKBZOFZ.js";
import {
  ComponentBase,
  ESC_KEY_HANDLING_PRIORITIES,
  Portal,
  PrimeReact,
  PrimeReactContext,
  ariaLabel,
  localeOption,
  useGlobalOnEscapeKey,
  useHandleStyle,
  useInterval,
  useMergeProps,
  useMountEffect,
  usePrevious,
  useResizeListener,
  useUnmountEffect,
  useUpdateEffect
} from "./chunk-ND4N7SA5.js";
import {
  DomHandler,
  IconUtils,
  ObjectUtils,
  UniqueComponentId,
  ZIndexUtils,
  classNames
} from "./chunk-JUPZ2DHH.js";
import "./chunk-SXRIVT2P.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/primereact/galleria/galleria.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var classes = {
  header: "p-galleria-header",
  footer: "p-galleria-footer",
  closeIcon: "p-galleria-close-icon",
  closeButton: "p-galleria-close p-link",
  root: function root(_ref) {
    var props = _ref.props, context = _ref.context, thumbnailsPosClassName = _ref.thumbnailsPosClassName, indicatorPosClassName = _ref.indicatorPosClassName;
    return classNames("p-galleria p-component", {
      "p-galleria-fullscreen": props.fullScreen,
      "p-galleria-indicator-onitem": props.showIndicatorsOnItem,
      "p-galleria-item-nav-onhover": props.showItemNavigatorsOnHover && !props.fullScreen,
      "p-input-filled": context && context.inputStyle === "filled" || PrimeReact.inputStyle === "filled",
      "p-ripple-disabled": context && context.ripple === false || PrimeReact.ripple === false
    }, thumbnailsPosClassName, indicatorPosClassName);
  },
  content: "p-galleria-content",
  mask: function mask(_ref2) {
    var visibleState = _ref2.visibleState;
    return classNames("p-galleria-mask", {
      "p-galleria-visible": visibleState
    });
  },
  thumbnailItem: function thumbnailItem(_ref3) {
    var subProps = _ref3.subProps;
    return classNames("p-galleria-thumbnail-item", {
      "p-galleria-thumbnail-item-current": subProps.current,
      "p-galleria-thumbnail-item-active": subProps.active,
      "p-galleria-thumbnail-item-start": subProps.start,
      "p-galleria-thumbnail-item-end": subProps.end
    });
  },
  thumbnailItemContent: "p-galleria-thumbnail-item-content",
  previousThumbnailIcon: "p-galleria-thumbnail-prev-icon",
  previousThumbnailButton: function previousThumbnailButton(_ref4) {
    var isDisabled = _ref4.isDisabled;
    return classNames("p-galleria-thumbnail-prev p-link", {
      "p-disabled": isDisabled
    });
  },
  nextThumbnailIcon: "p-galleria-thumbnail-next-icon",
  nextThumbnailButton: function nextThumbnailButton(_ref5) {
    var isDisabled = _ref5.isDisabled;
    return classNames("p-galleria-thumbnail-next p-link", {
      "p-disabled": isDisabled
    });
  },
  thumbnailContainer: "p-galleria-thumbnail-container",
  thumbnailItemsContainer: "p-galleria-thumbnail-items-container",
  thumbnailItems: "p-galleria-thumbnail-items",
  thumbnailWrapper: "p-galleria-thumbnail-wrapper",
  previousItemIcon: "p-galleria-item-prev-icon",
  previousItemButton: function previousItemButton(_ref6) {
    var isDisabled = _ref6.isDisabled;
    return classNames("p-galleria-item-prev p-galleria-item-nav p-link", {
      "p-disabled": isDisabled
    });
  },
  nextItemIcon: "p-galleria-item-next-icon",
  nextItemButton: function nextItemButton(_ref7) {
    var isDisabled = _ref7.isDisabled;
    return classNames("p-galleria-item-next p-galleria-item-nav p-link", {
      "p-disabled": isDisabled
    });
  },
  caption: "p-galleria-caption",
  indicator: function indicator(_ref8) {
    var isActive = _ref8.isActive;
    return classNames("p-galleria-indicator", {
      "p-highlight": isActive
    });
  },
  indicators: "p-galleria-indicators p-reset",
  itemWrapper: "p-galleria-item-wrapper",
  itemContainer: "p-galleria-item-container",
  item: "p-galleria-item",
  transition: "p-galleria"
};
var styles = "\n@layer primereact {\n    .p-galleria-content {\n        display: flex;\n        flex-direction: column;\n    }\n    \n    .p-galleria-item-wrapper {\n        display: flex;\n        flex-direction: column;\n        position: relative;\n    }\n    \n    .p-galleria-item-container {\n        position: relative;\n        display: flex;\n        height: 100%;\n    }\n    \n    .p-galleria-item-nav {\n        position: absolute;\n        top: 50%;\n        margin-top: -.5rem;\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n    }\n    \n    .p-galleria-item-prev {\n        left: 0;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    \n    .p-galleria-item-next {\n        right: 0;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n    }\n    \n    .p-galleria-item {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100%;\n        width: 100%;\n    }\n    \n    .p-galleria-item-nav-onhover .p-galleria-item-nav {\n        pointer-events: none;\n        opacity: 0;\n        transition: opacity .2s ease-in-out;\n    }\n    \n    .p-galleria-item-nav-onhover .p-galleria-item-wrapper:hover .p-galleria-item-nav {\n        pointer-events: all;\n        opacity: 1;\n    }\n    \n    .p-galleria-item-nav-onhover .p-galleria-item-wrapper:hover .p-galleria-item-nav.p-disabled {\n        pointer-events: none;\n    }\n    \n    .p-galleria-caption {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n    }\n    \n    /* Thumbnails */\n    .p-galleria-thumbnail-wrapper {\n        display: flex;\n        flex-direction: column;\n        overflow: auto;\n        flex-shrink: 0;\n    }\n    \n    .p-galleria-thumbnail-prev,\n    .p-galleria-thumbnail-next {\n        align-self: center;\n        flex: 0 0 auto;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n        position: relative;\n    }\n    \n    .p-galleria-thumbnail-prev span,\n    .p-galleria-thumbnail-next span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    .p-galleria-thumbnail-container {\n        display: flex;\n        flex-direction: row;\n    }\n    \n    .p-galleria-thumbnail-items-container {\n        overflow: hidden;\n        width: 100%;\n    }\n    \n    .p-galleria-thumbnail-items {\n        display: flex;\n    }\n    \n    .p-galleria-thumbnail-item {\n        overflow: auto;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        opacity: .5;\n    }\n    \n    .p-galleria-thumbnail-item:hover {\n        opacity: 1;\n        transition: opacity .3s;\n    }\n    \n    .p-galleria-thumbnail-item-current {\n        opacity: 1;\n    }\n    \n    /* Positions */\n    /* Thumbnails */\n    .p-galleria-thumbnails-left .p-galleria-content,\n    .p-galleria-thumbnails-right .p-galleria-content {\n        flex-direction: row;\n    }\n    \n    .p-galleria-thumbnails-left .p-galleria-item-wrapper,\n    .p-galleria-thumbnails-right .p-galleria-item-wrapper {\n        flex-direction: row;\n    }\n    \n    .p-galleria-thumbnails-left .p-galleria-item-wrapper,\n    .p-galleria-thumbnails-top .p-galleria-item-wrapper {\n        order: 2;\n    }\n    \n    .p-galleria-thumbnails-left .p-galleria-thumbnail-wrapper,\n    .p-galleria-thumbnails-top .p-galleria-thumbnail-wrapper {\n        order: 1;\n    }\n    \n    .p-galleria-thumbnails-left .p-galleria-thumbnail-container,\n    .p-galleria-thumbnails-right .p-galleria-thumbnail-container {\n        flex-direction: column;\n        flex-grow: 1;\n    }\n    \n    .p-galleria-thumbnails-left .p-galleria-thumbnail-items,\n    .p-galleria-thumbnails-right .p-galleria-thumbnail-items {\n        flex-direction: column;\n        height: 100%;\n    }\n    \n    /* Indicators */\n    .p-galleria-indicators {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    \n    .p-galleria-indicator > button {\n        display: inline-flex;\n        align-items: center;\n    }\n    \n    .p-galleria-indicators-left .p-galleria-item-wrapper,\n    .p-galleria-indicators-right .p-galleria-item-wrapper {\n        flex-direction: row;\n        align-items: center;\n    }\n    \n    .p-galleria-indicators-left .p-galleria-item-container,\n    .p-galleria-indicators-top .p-galleria-item-container {\n        order: 2;\n    }\n    \n    .p-galleria-indicators-left .p-galleria-indicators,\n    .p-galleria-indicators-top .p-galleria-indicators {\n        order: 1;\n    }\n    \n    .p-galleria-indicators-left .p-galleria-indicators,\n    .p-galleria-indicators-right .p-galleria-indicators {\n        flex-direction: column;\n    }\n    \n    .p-galleria-indicator-onitem .p-galleria-indicators {\n        position: absolute;\n        display: flex;\n        z-index: 1;\n    }\n    \n    .p-galleria-indicator-onitem.p-galleria-indicators-top .p-galleria-indicators {\n        top: 0;\n        left: 0;\n        width: 100%;\n        align-items: flex-start;\n    }\n    \n    .p-galleria-indicator-onitem.p-galleria-indicators-right .p-galleria-indicators {\n        right: 0;\n        top: 0;\n        height: 100%;\n        align-items: flex-end;\n    }\n    \n    .p-galleria-indicator-onitem.p-galleria-indicators-bottom .p-galleria-indicators {\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        align-items: flex-end;\n    }\n    \n    .p-galleria-indicator-onitem.p-galleria-indicators-left .p-galleria-indicators {\n        left: 0;\n        top: 0;\n        height: 100%;\n        align-items: flex-start;\n    }\n    \n    /* FullScreen */\n    .p-galleria-mask {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        pointer-events: none;\n    }\n    \n    .p-galleria-mask.p-component-overlay {\n        pointer-events: auto;\n    }\n    \n    .p-galleria-close {\n        position: absolute;\n        top: 0;\n        right: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n    }\n    \n    .p-galleria-mask .p-galleria-item-nav {\n        position: fixed;\n        top: 50%;\n        margin-top: -.5rem;\n    }\n    \n    /* Animation */\n    .p-galleria-enter {\n        opacity: 0;\n        transform: scale(0.7);\n    }\n    \n    .p-galleria-enter-active {\n        opacity: 1;\n        transform: scale(1);\n        transition: all 150ms cubic-bezier(0, 0, 0.2, 1);\n    }\n    \n    .p-galleria-enter-done {\n        transform: none;\n    }\n    \n    .p-galleria-exit {\n        opacity: 1;\n    }\n    \n    .p-galleria-exit-active {\n        opacity: 0;\n        transform: scale(0.7);\n        transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n    }\n    \n    .p-galleria-enter-active .p-galleria-item-nav {\n        opacity: 0;\n    }\n    \n    /* Keyboard Support */\n    .p-items-hidden .p-galleria-thumbnail-item {\n        visibility: hidden;\n    }\n    \n    .p-items-hidden .p-galleria-thumbnail-item.p-galleria-thumbnail-item-active {\n        visibility: visible;\n    }\n}\n";
var inlineStyles = {
  thumbnailItemsContainer: function thumbnailItemsContainer(_ref9) {
    var height = _ref9.height;
    return {
      height
    };
  }
};
var GalleriaBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Galleria",
    activeIndex: 0,
    autoPlay: false,
    baseZIndex: 0,
    caption: null,
    changeItemOnIndicatorHover: false,
    children: void 0,
    circular: false,
    className: null,
    closeIcon: null,
    footer: null,
    fullScreen: false,
    header: null,
    id: null,
    indicator: null,
    indicatorsPosition: "bottom",
    item: null,
    itemNextIcon: null,
    itemPrevIcon: null,
    nextThumbnailIcon: null,
    numVisible: 3,
    onHide: null,
    onItemChange: null,
    onShow: null,
    prevThumbnailIcon: null,
    responsiveOptions: null,
    showIndicators: false,
    showIndicatorsOnItem: false,
    showItemNavigators: false,
    showItemNavigatorsOnHover: false,
    showThumbnailNavigators: true,
    showThumbnails: true,
    style: null,
    thumbnail: null,
    thumbnailsPosition: "bottom",
    transitionInterval: 4e3,
    transitionOptions: null,
    value: null,
    verticalThumbnailViewPortHeight: "300px"
  },
  css: {
    classes,
    styles,
    inlineStyles
  }
});
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function ownKeys$2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var GalleriaItem = React.memo(React.forwardRef(function(props, ref) {
  var mergeProps = useMergeProps();
  var indicatorContent = React.useRef(null);
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key, options) {
    return ptm(key, _objectSpread$2({
      hostName: props.hostName
    }, options));
  };
  var ariaSlideNumber = function ariaSlideNumber2(value) {
    return ariaLabel("slideNumber", {
      slideNumber: value
    });
  };
  var ariaPageLabel = function ariaPageLabel2(value) {
    return ariaLabel("pageLabel", {
      page: value
    });
  };
  var next = function next2() {
    var nextItemIndex = props.activeItemIndex + 1;
    props.onActiveItemChange({
      index: props.circular && props.value.length - 1 === props.activeItemIndex ? 0 : nextItemIndex
    });
  };
  var prev = function prev2() {
    var prevItemIndex = props.activeItemIndex !== 0 ? props.activeItemIndex - 1 : 0;
    props.onActiveItemChange({
      index: props.circular && props.activeItemIndex === 0 ? props.value.length - 1 : prevItemIndex
    });
  };
  var stopSlideShow = function stopSlideShow2() {
    if (props.slideShowActive && props.stopSlideShow) {
      props.stopSlideShow();
    }
  };
  var navBackward = function navBackward2(e) {
    stopSlideShow();
    prev();
    if (e && e.cancelable) {
      e.preventDefault();
    }
  };
  var navForward = function navForward2(e) {
    stopSlideShow();
    next();
    if (e && e.cancelable) {
      e.preventDefault();
    }
  };
  var onIndicatorClick = function onIndicatorClick2(index) {
    stopSlideShow();
    props.onActiveItemChange({
      index
    });
  };
  var onIndicatorMouseEnter = function onIndicatorMouseEnter2(index) {
    if (props.changeItemOnIndicatorHover) {
      stopSlideShow();
      props.onActiveItemChange({
        index
      });
    }
  };
  var onIndicatorKeyDown = function onIndicatorKeyDown2(event, index) {
    switch (event.code) {
      case "Enter":
      case "NumpadEnter":
      case "Space":
        stopSlideShow();
        props.onActiveItemChange({
          index
        });
        event.preventDefault();
        break;
      case "ArrowRight":
        onRightKey();
        break;
      case "ArrowLeft":
        onLeftKey();
        break;
      case "Home":
        onHomeKey();
        event.preventDefault();
        break;
      case "End":
        onEndKey();
        event.preventDefault();
        break;
      case "Tab":
        onTabKey();
        break;
      case "ArrowDown":
      case "ArrowUp":
      case "PageUp":
      case "PageDown":
        event.preventDefault();
        break;
    }
  };
  var onRightKey = function onRightKey2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, activeIndex + 1 === indicators2.length ? indicators2.length - 1 : activeIndex + 1);
  };
  var onLeftKey = function onLeftKey2() {
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, activeIndex - 1 <= 0 ? 0 : activeIndex - 1);
  };
  var onHomeKey = function onHomeKey2() {
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, 0);
  };
  var onEndKey = function onEndKey2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, indicators2.length - 1);
  };
  var onTabKey = function onTabKey2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    var highlightedIndex = indicators2.findIndex(function(ind) {
      return DomHandler.getAttribute(ind, "data-p-highlight") === true;
    });
    var activeIndicator = DomHandler.findSingle(indicatorContent.current, '[data-pc-section="indicator"] > button[tabindex="0"]');
    var activeIndex = indicators2.findIndex(function(ind) {
      return ind === activeIndicator.parentElement;
    });
    indicators2[activeIndex].children[0].tabIndex = "-1";
    indicators2[highlightedIndex].children[0].tabIndex = "0";
  };
  var findFocusedIndicatorIndex = function findFocusedIndicatorIndex2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    var activeIndicator = DomHandler.findSingle(indicatorContent.current, '[data-pc-section="indicator"] > button[tabindex="0"]');
    return indicators2.findIndex(function(ind) {
      return ind === activeIndicator.parentElement;
    });
  };
  var changedFocusedIndicator = function changedFocusedIndicator2(prevInd, nextInd) {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    indicators2[prevInd].children[0].tabIndex = "-1";
    indicators2[nextInd].children[0].tabIndex = "0";
    indicators2[nextInd].children[0].focus();
  };
  useMountEffect(function() {
    if (props.autoPlay) {
      props.startSlideShow();
    }
  });
  var createBackwardNavigator = function createBackwardNavigator2() {
    if (props.showItemNavigators) {
      var isDisabled = !props.circular && props.activeItemIndex === 0;
      var previousItemIconProps = mergeProps({
        className: cx("previousItemIcon")
      }, getPTOptions("previousItemIcon"));
      var icon = props.itemPrevIcon || React.createElement(ChevronLeftIcon, previousItemIconProps);
      var itemPrevIcon = IconUtils.getJSXIcon(icon, _objectSpread$2({}, previousItemIconProps), {
        props
      });
      var previousItemButtonProps = mergeProps({
        type: "button",
        className: cx("previousItemButton", {
          isDisabled
        }),
        onClick: navBackward,
        disabled: isDisabled,
        "data-p-disabled": isDisabled,
        "data-pc-group-section": "itemnavigator"
      }, getPTOptions("previousItemButton"));
      return React.createElement("button", previousItemButtonProps, itemPrevIcon, React.createElement(Ripple, null));
    }
    return null;
  };
  var createForwardNavigator = function createForwardNavigator2() {
    if (props.showItemNavigators) {
      var isDisabled = !props.circular && props.activeItemIndex === props.value.length - 1;
      var nextItemIconProps = mergeProps({
        className: cx("nextItemIcon")
      }, getPTOptions("nextItemIcon"));
      var icon = props.itemNextIcon || React.createElement(ChevronRightIcon, nextItemIconProps);
      var itemNextIcon = IconUtils.getJSXIcon(icon, _objectSpread$2({}, nextItemIconProps), {
        props
      });
      var nextItemButtonProps = mergeProps({
        type: "button",
        className: cx("nextItemButton", {
          isDisabled
        }),
        onClick: navForward,
        disabled: isDisabled,
        "data-p-disabled": isDisabled,
        "data-pc-group-section": "itemnavigator"
      }, getPTOptions("nextItemButton"));
      return React.createElement("button", nextItemButtonProps, itemNextIcon, React.createElement(Ripple, null));
    }
    return null;
  };
  var createCaption = function createCaption2() {
    var captionProps = mergeProps({
      className: cx("caption")
    }, getPTOptions("caption"));
    if (props.caption) {
      var _content = props.caption(props.value[props.activeItemIndex]);
      return React.createElement("div", captionProps, _content);
    }
    return null;
  };
  var createIndicator = function createIndicator2(index) {
    var key = "p-galleria-indicator-" + index;
    var isActive = props.activeItemIndex === index;
    var indicator2 = props.indicator && props.indicator(index);
    var indicatorProps = mergeProps({
      className: cx("indicator", {
        isActive
      }),
      tabIndex: 0,
      "aria-label": ariaPageLabel(index + 1),
      "aria-selected": props.activeIndex === index,
      "aria-controls": props.id + "_item_" + index,
      "data-p-highlight": isActive,
      onClick: function onClick() {
        return onIndicatorClick(index);
      },
      onMouseEnter: function onMouseEnter() {
        return onIndicatorMouseEnter(index);
      },
      onKeyDown: function onKeyDown(e) {
        return onIndicatorKeyDown(e, index);
      }
    }, getPTOptions("indicator"));
    if (!indicator2) {
      indicator2 = React.createElement("button", {
        tabIndex: props.activeIndex === index ? "0" : "-1",
        type: "button",
        className: "p-link"
      }, React.createElement(Ripple, null));
    }
    return React.createElement("li", _extends({}, indicatorProps, {
      key
    }), indicator2);
  };
  var createIndicators = function createIndicators2() {
    if (props.showIndicators) {
      var _indicators = [];
      var indicatorsProps = mergeProps({
        className: classNames(props.indicatorsContentClassName, cx("indicators"))
      }, getPTOptions("indicators"));
      for (var i = 0; i < props.value.length; i++) {
        _indicators.push(createIndicator(i));
      }
      return React.createElement("ul", _extends({
        ref: indicatorContent
      }, indicatorsProps), _indicators);
    }
    return null;
  };
  var content = props.itemTemplate && props.itemTemplate(props.value[props.activeItemIndex]);
  var backwardNavigator = createBackwardNavigator();
  var forwardNavigator = createForwardNavigator();
  var caption = createCaption();
  var indicators = createIndicators();
  var itemWrapperProps = mergeProps({
    ref,
    className: cx("itemWrapper")
  }, getPTOptions("itemWrapper"));
  var itemContainerProps = mergeProps({
    className: cx("itemContainer")
  }, getPTOptions("itemContainer"));
  var itemProps = mergeProps({
    className: cx("item"),
    id: props.id + "_item_" + props.activeItemIndex,
    role: "group",
    "aria-label": ariaSlideNumber(props.activeItemIndex + 1),
    "aria-roledescription": localeOption("aria") ? localeOption("aria").slide : void 0
  }, getPTOptions("item"));
  return React.createElement("div", itemWrapperProps, React.createElement("div", itemContainerProps, backwardNavigator, React.createElement("div", itemProps, content), forwardNavigator, caption), indicators);
}));
GalleriaItem.displayName = "GalleriaItem";
function ownKeys$1(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$1(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$1(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var GalleriaThumbnailItem = React.memo(function(props) {
  var mergeProps = useMergeProps();
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key, options) {
    return ptm(key, _objectSpread$1({
      hostName: props.hostName
    }, options));
  };
  var onItemClick = function onItemClick2(event) {
    props.onItemClick({
      originalEvent: event,
      index: props.index
    });
  };
  var ariaPageLabel = function ariaPageLabel2(value) {
    return ariaLabel("pageLabel", {
      page: value
    });
  };
  var onThumbnailKeydown = function onThumbnailKeydown2(event) {
    if (event.code === "Enter" || event.code === "NumpadEnter" || event.code === "Space") {
      props.onItemClick({
        originalEvent: event,
        index: props.index
      });
      event.preventDefault();
    }
    switch (event.code) {
      case "ArrowRight":
        onRightKey();
        break;
      case "ArrowLeft":
        onLeftKey();
        break;
      case "Home":
        onHomeKey();
        event.preventDefault();
        break;
      case "End":
        onEndKey();
        event.preventDefault();
        break;
      case "ArrowUp":
      case "ArrowDown":
        event.preventDefault();
        break;
      case "Tab":
        onTabKey();
        break;
    }
  };
  var onRightKey = function onRightKey2() {
    var indicators = DomHandler.find(props.itemsContainerRef.current, '[data-pc-section="thumbnailitem"]');
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, activeIndex + 1 === indicators.length ? indicators.length - 1 : activeIndex + 1);
  };
  var onLeftKey = function onLeftKey2() {
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, activeIndex - 1 <= 0 ? 0 : activeIndex - 1);
  };
  var onHomeKey = function onHomeKey2() {
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, 0);
  };
  var onEndKey = function onEndKey2() {
    var indicators = DomHandler.find(props.itemsContainerRef.current, '[data-pc-section="thumbnailitem"]');
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, indicators.length - 1);
  };
  var onTabKey = function onTabKey2() {
    var indicators = _toConsumableArray(DomHandler.find(props.itemsContainerRef.current, '[data-pc-section="thumbnailitem"]'));
    var highlightedIndex = indicators.findIndex(function(ind) {
      return DomHandler.getAttribute(ind, "data-p-active") === true;
    });
    var activeIndicator = DomHandler.findSingle(props.itemsContainerRef.current, '[tabindex="0"]');
    var activeIndex = indicators.findIndex(function(ind) {
      return ind === activeIndicator.parentElement;
    });
    indicators[activeIndex].children[0].tabIndex = "-1";
    indicators[highlightedIndex].children[0].tabIndex = "0";
  };
  var findFocusedIndicatorIndex = function findFocusedIndicatorIndex2() {
    var indicators = _toConsumableArray(DomHandler.find(props.itemsContainerRef.current, '[data-pc-section="thumbnailitem"]'));
    var activeIndicator = DomHandler.findSingle(props.itemsContainerRef.current, '[data-pc-section="thumbnailitem"] > [tabindex="0"]');
    return indicators.findIndex(function(ind) {
      return ind === activeIndicator.parentElement;
    });
  };
  var changedFocusedIndicator = function changedFocusedIndicator2(prevInd, nextInd) {
    var indicators = DomHandler.find(props.itemsContainerRef.current, '[data-pc-section="thumbnailitem"]');
    indicators[prevInd].children[0].tabIndex = "-1";
    indicators[nextInd].children[0].tabIndex = "0";
    indicators[nextInd].children[0].focus();
  };
  var content = props.template && props.template(props.item);
  var thumbnailItemProps = mergeProps({
    className: classNames(props.className, cx("thumbnailItem", {
      subProps: props
    })),
    role: "tab",
    "data-p-active": props.current,
    "aria-selected": props.current,
    "aria-controls": props.containerId + "_item_" + props.index,
    onKeyDown: onThumbnailKeydown,
    "data-p-galleria-thumbnail-item-current": props.current,
    "data-p-galleria-thumbnail-item-active": props.active,
    "data-p-galleria-thumbnail-item-start": props.start,
    "data-p-galleria-thumbnail-item-end": props.end
  }, getPTOptions("thumbnailItem"));
  var thumbnailItemContentProps = mergeProps({
    className: cx("thumbnailItemContent"),
    tabIndex: props.current ? "0" : "-1",
    "aria-label": ariaPageLabel(props.index + 1),
    "aria-current": props.current ? "page" : void 0,
    onClick: onItemClick
  }, getPTOptions("thumbnailItemContent"));
  return React.createElement("div", _extends({}, thumbnailItemProps, {
    key: props.index + "_galleriathumbnailitem"
  }), React.createElement("div", thumbnailItemContentProps, content));
});
var GalleriaThumbnails = React.memo(React.forwardRef(function(props, ref) {
  var mergeProps = useMergeProps();
  var _React$useState = React.useState(props.numVisible), _React$useState2 = _slicedToArray(_React$useState, 2), numVisibleState = _React$useState2[0], setNumVisibleState = _React$useState2[1];
  var _React$useState3 = React.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), totalShiftedItemsState = _React$useState4[0], setTotalShiftedItemsState = _React$useState4[1];
  var itemsContainerRef = React.useRef(null);
  var startPos = React.useRef(null);
  var attributeSelector = React.useRef("");
  var thumbnailsStyle = React.useRef(null);
  var responsiveOptions = React.useRef(null);
  var prevNumVisible = usePrevious(numVisibleState);
  var prevActiveItemIndex = usePrevious(props.activeItemIndex);
  var context = React.useContext(PrimeReactContext);
  var ptm = props.ptm, cx = props.cx, sx = props.sx;
  var getPTOptions = function getPTOptions2(key, options) {
    return ptm(key, _objectSpread$1({
      hostName: props.hostName
    }, options));
  };
  var _useResizeListener = useResizeListener({
    listener: function listener() {
      calculatePosition();
    },
    when: props.responsiveOptions
  }), _useResizeListener2 = _slicedToArray(_useResizeListener, 1), bindWindowResizeListener = _useResizeListener2[0];
  var step = function step2(dir) {
    var totalShiftedItems = totalShiftedItemsState + dir;
    if (dir < 0 && -1 * totalShiftedItems + numVisibleState > props.value.length - 1) {
      totalShiftedItems = numVisibleState - props.value.length;
    } else if (dir > 0 && totalShiftedItems > 0) {
      totalShiftedItems = 0;
    }
    if (props.circular) {
      if (dir < 0 && props.value.length - 1 === props.activeItemIndex) {
        totalShiftedItems = 0;
      } else if (dir > 0 && props.activeItemIndex === 0) {
        totalShiftedItems = numVisibleState - props.value.length;
      }
    }
    if (itemsContainerRef.current) {
      DomHandler.removeClass(itemsContainerRef.current, "p-items-hidden");
      itemsContainerRef.current.style.transform = props.isVertical ? "translate3d(0, ".concat(totalShiftedItems * (100 / numVisibleState), "%, 0)") : "translate3d(".concat(totalShiftedItems * (100 / numVisibleState), "%, 0, 0)");
      itemsContainerRef.current.style.transition = "transform 500ms ease 0s";
    }
    setTotalShiftedItemsState(totalShiftedItems);
  };
  var stopSlideShow = function stopSlideShow2() {
    if (props.slideShowActive && props.stopSlideShow) {
      props.stopSlideShow();
    }
  };
  var getMedianItemIndex = function getMedianItemIndex2() {
    var index = Math.floor(numVisibleState / 2);
    return numVisibleState % 2 ? index : index - 1;
  };
  var navBackward = function navBackward2(e) {
    stopSlideShow();
    var prevItemIndex = props.activeItemIndex !== 0 ? props.activeItemIndex - 1 : 0;
    var diff = prevItemIndex + totalShiftedItemsState;
    if (numVisibleState - diff - 1 > getMedianItemIndex() && (-1 * totalShiftedItemsState !== 0 || props.circular)) {
      step(1);
    }
    props.onActiveItemChange({
      index: props.circular && props.activeItemIndex === 0 ? props.value.length - 1 : prevItemIndex
    });
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var navForward = function navForward2(e) {
    stopSlideShow();
    var nextItemIndex = props.activeItemIndex + 1;
    if (nextItemIndex + totalShiftedItemsState > getMedianItemIndex() && (-1 * totalShiftedItemsState < getTotalPageNumber() - 1 || props.circular)) {
      step(-1);
    }
    props.onActiveItemChange({
      index: props.circular && props.value.length - 1 === props.activeItemIndex ? 0 : nextItemIndex
    });
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var onItemClick = function onItemClick2(event) {
    stopSlideShow();
    var selectedItemIndex = event.index;
    if (selectedItemIndex !== props.activeItemIndex) {
      var diff = selectedItemIndex + totalShiftedItemsState;
      var dir = 0;
      if (selectedItemIndex < props.activeItemIndex) {
        dir = numVisibleState - diff - 1 - getMedianItemIndex();
        if (dir > 0 && -1 * totalShiftedItemsState !== 0) {
          step(dir);
        }
      } else {
        dir = getMedianItemIndex() - diff;
        if (dir < 0 && -1 * totalShiftedItemsState < getTotalPageNumber() - 1) {
          step(dir);
        }
      }
      props.onActiveItemChange({
        index: selectedItemIndex
      });
    }
  };
  var onTransitionEnd = function onTransitionEnd2(e) {
    if (itemsContainerRef.current && e.propertyName === "transform") {
      document.body.setAttribute("data-p-items-hidden", "false");
      !props.isUnstyled() && DomHandler.addClass(itemsContainerRef.current, "p-items-hidden");
      itemsContainerRef.current.style.transition = "";
    }
  };
  var onTouchStart = function onTouchStart2(e) {
    var touchobj = e.changedTouches[0];
    startPos.current = {
      x: touchobj.pageX,
      y: touchobj.pageY
    };
  };
  var onTouchMove = function onTouchMove2(e) {
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var onTouchEnd = function onTouchEnd2(e) {
    var touchobj = e.changedTouches[0];
    if (props.isVertical) {
      changePageOnTouch(e, touchobj.pageY - startPos.current.y);
    } else {
      changePageOnTouch(e, touchobj.pageX - startPos.current.x);
    }
  };
  var changePageOnTouch = function changePageOnTouch2(e, diff) {
    if (diff < 0) {
      navForward(e);
    } else {
      navBackward(e);
    }
  };
  var getTotalPageNumber = function getTotalPageNumber2() {
    return props.value.length > numVisibleState ? props.value.length - numVisibleState + 1 : 0;
  };
  var createStyle = function createStyle2() {
    if (!thumbnailsStyle.current) {
      thumbnailsStyle.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact.nonce, context && context.styleContainer);
    }
    var innerHTML = '\n            [data-pc-section="thumbnailitems"]['.concat(attributeSelector.current, '] {\n                [data-pc-section="thumbnailitem"] {\n                    flex: 1 0 ').concat(100 / numVisibleState, "%\n                }\n            } \n        ");
    if (props.responsiveOptions) {
      var comparator = ObjectUtils.localeComparator(context && context.locale || PrimeReact.locale);
      responsiveOptions.current = _toConsumableArray(props.responsiveOptions);
      responsiveOptions.current.sort(function(data1, data2) {
        var value1 = data1.breakpoint;
        var value2 = data2.breakpoint;
        return ObjectUtils.sort(value1, value2, -1, comparator, context && context.nullSortOrder || PrimeReact.nullSortOrder);
      });
      for (var i = 0; i < responsiveOptions.current.length; i++) {
        var res = responsiveOptions.current[i];
        innerHTML = innerHTML + "\n                    @media screen and (max-width: ".concat(res.breakpoint, ') {\n                        [data-pc-section="thumbnailitems"][').concat(attributeSelector.current, '] {\n                            [data-pc-section="thumbnailitem"] {\n                                flex: 1 0 ').concat(100 / res.numVisible, "%\n                            }\n                        } \n                    }\n                ");
      }
    }
    thumbnailsStyle.current.innerHTML = innerHTML;
  };
  var calculatePosition = function calculatePosition2() {
    if (itemsContainerRef.current && responsiveOptions.current) {
      var windowWidth = window.innerWidth;
      var matchedResponsiveData = {
        numVisible: props.numVisible
      };
      for (var i = 0; i < responsiveOptions.current.length; i++) {
        var res = responsiveOptions.current[i];
        if (parseInt(res.breakpoint, 10) >= windowWidth) {
          matchedResponsiveData = res;
        }
      }
      if (numVisibleState !== matchedResponsiveData.numVisible) {
        setNumVisibleState(matchedResponsiveData.numVisible);
      }
    }
  };
  useMountEffect(function() {
    if (itemsContainerRef.current) {
      attributeSelector.current = UniqueComponentId();
      itemsContainerRef.current.setAttribute(attributeSelector.current, "");
    }
    createStyle();
    calculatePosition();
    bindWindowResizeListener();
  });
  useUpdateEffect(function() {
    var totalShiftedItems = totalShiftedItemsState;
    if (prevNumVisible !== numVisibleState || prevActiveItemIndex !== props.activeItemIndex) {
      if (props.activeItemIndex <= getMedianItemIndex()) {
        totalShiftedItems = 0;
      } else if (props.value.length - numVisibleState + getMedianItemIndex() < props.activeItemIndex) {
        totalShiftedItems = numVisibleState - props.value.length;
      } else if (props.value.length - numVisibleState < props.activeItemIndex && numVisibleState % 2 === 0) {
        totalShiftedItems = props.activeItemIndex * -1 + getMedianItemIndex() + 1;
      } else {
        totalShiftedItems = props.activeItemIndex * -1 + getMedianItemIndex();
      }
      if (totalShiftedItems !== totalShiftedItemsState) {
        setTotalShiftedItemsState(totalShiftedItems);
      }
      itemsContainerRef.current.style.transform = props.isVertical ? "translate3d(0, ".concat(totalShiftedItems * (100 / numVisibleState), "%, 0)") : "translate3d(".concat(totalShiftedItems * (100 / numVisibleState), "%, 0, 0)");
      if (prevActiveItemIndex !== props.activeItemIndex) {
        document.body.setAttribute("data-p-items-hidden", "false");
        !props.isUnstyled() && DomHandler.removeClass(itemsContainerRef.current, "p-items-hidden");
        itemsContainerRef.current.style.transition = "transform 500ms ease 0s";
      }
    }
  });
  var createItems = function createItems2() {
    return props.value.map(function(item, index) {
      var firstIndex = totalShiftedItemsState * -1;
      var lastIndex = firstIndex + numVisibleState - 1;
      var isActive = firstIndex <= index && lastIndex >= index;
      var start = firstIndex === index;
      var end = lastIndex === index;
      var current = props.activeItemIndex === index;
      return React.createElement(GalleriaThumbnailItem, {
        key: index,
        index,
        containerId: props.containerId,
        itemsContainerRef,
        template: props.itemTemplate,
        item,
        active: isActive,
        start,
        end,
        onItemClick,
        current,
        ptm,
        cx,
        sx
      });
    });
  };
  var createBackwardNavigator = function createBackwardNavigator2() {
    if (props.showThumbnailNavigators) {
      var isDisabled = !props.circular && props.activeItemIndex === 0 || props.value.length <= numVisibleState;
      var previousThumbnailIconProps = mergeProps({
        className: cx("previousThumbnailIcon")
      }, getPTOptions("previousThumbnailIcon"));
      var icon = props.isVertical ? props.prevThumbnailIcon || React.createElement(ChevronUpIcon, previousThumbnailIconProps) : props.prevThumbnailIcon || React.createElement(ChevronLeftIcon, previousThumbnailIconProps);
      var prevThumbnailIcon = IconUtils.getJSXIcon(icon, _objectSpread$1({}, previousThumbnailIconProps), {
        props
      });
      var previousThumbnailButtonProps = mergeProps({
        className: cx("previousThumbnailButton", {
          isDisabled
        }),
        onClick: navBackward,
        type: "button",
        disabled: isDisabled,
        "data-p-disabled": isDisabled,
        "aria-label": localeOption("aria") ? localeOption("aria").previousPageLabel : void 0,
        "data-pc-group-section": "thumbnailnavigator"
      }, getPTOptions("previousThumbnailButton"));
      return React.createElement("button", previousThumbnailButtonProps, prevThumbnailIcon, React.createElement(Ripple, null));
    }
    return null;
  };
  var createForwardNavigator = function createForwardNavigator2() {
    if (props.showThumbnailNavigators) {
      var isDisabled = !props.circular && props.activeItemIndex === props.value.length - 1 || props.value.length <= numVisibleState;
      var nextThumbnailIconProps = mergeProps({
        className: cx("nextThumbnailIcon")
      }, getPTOptions("nextThumbnailIcon"));
      var icon = props.isVertical ? props.nextThumbnailIcon || React.createElement(ChevronDownIcon, nextThumbnailIconProps) : props.nextThumbnailIcon || React.createElement(ChevronRightIcon, nextThumbnailIconProps);
      var nextThumbnailIcon = IconUtils.getJSXIcon(icon, _objectSpread$1({}, nextThumbnailIconProps), {
        props
      });
      var nextThumbnailButtonProps = mergeProps({
        className: cx("nextThumbnailButton", {
          isDisabled
        }),
        disabled: isDisabled,
        type: "button",
        "aria-label": localeOption("aria") ? localeOption("aria").nextPageLabel : void 0,
        onClick: navForward,
        "data-p-disabled": isDisabled,
        "data-pc-group-section": "thumbnailnavigator"
      }, getPTOptions("nextThumbnailButton"));
      return React.createElement("button", nextThumbnailButtonProps, nextThumbnailIcon, React.createElement(Ripple, null));
    }
    return null;
  };
  var createContent = function createContent2() {
    var items = createItems();
    var height = props.isVertical ? props.contentHeight : "";
    var backwardNavigator = createBackwardNavigator();
    var forwardNavigator = createForwardNavigator();
    var thumbnailContainerProps = mergeProps({
      className: cx("thumbnailContainer")
    }, getPTOptions("thumbnailContainer"));
    var thumbnailItemsContainerProps = mergeProps({
      className: cx("thumbnailItemsContainer"),
      style: sx("thumbnailItemsContainer", {
        height
      })
    }, getPTOptions("thumbnailItemsContainer"));
    var thumbnailItemsProps = mergeProps({
      ref: itemsContainerRef,
      className: cx("thumbnailItems"),
      role: "tablist",
      onTransitionEnd,
      onTouchStart,
      onTouchMove,
      onTouchEnd
    }, getPTOptions("thumbnailItems"));
    return React.createElement("div", thumbnailContainerProps, backwardNavigator, React.createElement("div", thumbnailItemsContainerProps, React.createElement("div", thumbnailItemsProps, items)), forwardNavigator);
  };
  var content = createContent();
  var thumbnailWrapperProps = mergeProps({
    className: cx("thumbnailWrapper")
  }, getPTOptions("thumbnailWrapper"));
  return React.createElement("div", thumbnailWrapperProps, content);
}));
GalleriaThumbnailItem.displayName = "GalleriaThumbnailItem";
GalleriaThumbnails.displayName = "GalleriaThumbnails";
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var Galleria = React.memo(React.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React.useContext(PrimeReactContext);
  var props = GalleriaBase.getProps(inProps, context);
  var _React$useState = React.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), visibleState = _React$useState2[0], setVisibleState = _React$useState2[1];
  var _React$useState3 = React.useState(props.numVisible), _React$useState4 = _slicedToArray(_React$useState3, 2), numVisibleState = _React$useState4[0], setNumVisibleState = _React$useState4[1];
  var _React$useState5 = React.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), slideShowActiveState = _React$useState6[0], setSlideShowActiveState = _React$useState6[1];
  var _React$useState7 = React.useState(props.activeIndex), _React$useState8 = _slicedToArray(_React$useState7, 2), activeIndexState = _React$useState8[0], setActiveIndexState = _React$useState8[1];
  var elementRef = React.useRef(null);
  var previewContentRef = React.useRef(null);
  var maskRef = React.useRef(null);
  var activeItemIndex = props.onItemChange ? props.activeIndex : activeIndexState;
  var isVertical = props.thumbnailsPosition === "left" || props.thumbnailsPosition === "right";
  var id = props.id || UniqueComponentId();
  var _GalleriaBase$setMeta = GalleriaBase.setMetaData({
    props,
    state: {
      visible: visibleState,
      numVisible: numVisibleState,
      slideShowActive: slideShowActiveState,
      activeIndex: activeIndexState
    }
  }), ptm = _GalleriaBase$setMeta.ptm, cx = _GalleriaBase$setMeta.cx, sx = _GalleriaBase$setMeta.sx, isUnstyled = _GalleriaBase$setMeta.isUnstyled;
  useHandleStyle(GalleriaBase.css.styles, isUnstyled, {
    name: "galleria"
  });
  useGlobalOnEscapeKey({
    callback: function callback() {
      hide();
    },
    when: props.closeOnEscape && props.fullScreen,
    priority: [ESC_KEY_HANDLING_PRIORITIES.IMAGE, 0]
  });
  useInterval(function() {
    onActiveItemChange({
      index: props.circular && props.value.length - 1 === activeItemIndex ? 0 : activeItemIndex + 1
    });
  }, props.transitionInterval, slideShowActiveState);
  var onActiveItemChange = function onActiveItemChange2(event) {
    if (event.index >= props.value.length) {
      stopSlideShow();
      return;
    }
    if (props.onItemChange) {
      props.onItemChange(event);
    } else {
      setActiveIndexState(event.index);
    }
  };
  var show = function show2() {
    setVisibleState(true);
  };
  var hide = function hide2() {
    setVisibleState(false);
  };
  var onEnter = function onEnter2() {
    DomHandler.blockBodyScroll();
  };
  var onEntering = function onEntering2() {
    ZIndexUtils.set("modal", maskRef.current, context && context.autoZIndex || PrimeReact.autoZIndex, props.baseZIndex || context && context.zIndex.modal || PrimeReact.zIndex.modal);
    !isUnstyled() && DomHandler.addMultipleClasses(maskRef.current, "p-component-overlay p-component-overlay-enter");
  };
  var onEntered = function onEntered2() {
    props.onShow && props.onShow();
  };
  var onExit = function onExit2() {
    DomHandler.unblockBodyScroll();
    !isUnstyled() && DomHandler.addClass(maskRef.current, "p-component-overlay-leave");
  };
  var onExited = function onExited2() {
    ZIndexUtils.clear(maskRef.current);
    props.onHide && props.onHide();
  };
  var isAutoPlayActive = function isAutoPlayActive2() {
    return slideShowActiveState;
  };
  var startSlideShow = function startSlideShow2() {
    setSlideShowActiveState(true);
  };
  var stopSlideShow = function stopSlideShow2() {
    setSlideShowActiveState(false);
  };
  var getPositionClassName = function getPositionClassName2(preClassName, position) {
    var positions = ["top", "left", "bottom", "right"];
    var pos = positions.find(function(item) {
      return item === position;
    });
    return pos ? "".concat(preClassName, "-").concat(pos) : "";
  };
  React.useEffect(function() {
    if (props.value && props.value.length < numVisibleState) {
      setNumVisibleState(props.value.length);
    }
  }, [props.value, numVisibleState]);
  React.useEffect(function() {
    setNumVisibleState(props.numVisible);
  }, [props.numVisible]);
  useUnmountEffect(function() {
    if (slideShowActiveState) {
      stopSlideShow();
    }
    ZIndexUtils.clear(maskRef.current);
  });
  React.useImperativeHandle(ref, function() {
    return {
      props,
      show,
      hide,
      isAutoPlayActive,
      startSlideShow,
      stopSlideShow,
      getElement: function getElement() {
        return elementRef.current;
      },
      getPreviewContent: function getPreviewContent() {
        return previewContentRef.current;
      }
    };
  });
  var createHeader = function createHeader2() {
    var headerProps = mergeProps({
      className: cx("header")
    }, ptm("header"));
    if (props.header) {
      return React.createElement("div", headerProps, props.header);
    }
    return null;
  };
  var createFooter = function createFooter2() {
    var footerProps = mergeProps({
      className: cx("footer")
    }, ptm("footer"));
    if (props.footer) {
      return React.createElement("div", footerProps, props.footer);
    }
    return null;
  };
  var createElement2 = function createElement3() {
    var thumbnailsPosClassName = props.showThumbnails && getPositionClassName("p-galleria-thumbnails", props.thumbnailsPosition);
    var indicatorPosClassName = props.showIndicators && getPositionClassName("p-galleria-indicators", props.indicatorsPosition);
    var closeIconProps = mergeProps({
      className: cx("closeIcon"),
      "aria-hidden": true
    }, ptm("closeIcon"));
    var icon = props.closeIcon || React.createElement(TimesIcon, closeIconProps);
    var closeIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, closeIconProps), {
      props
    });
    var closeButtonProps = mergeProps({
      type: "button",
      className: cx("closeButton"),
      "aria-label": localeOption("aria") ? localeOption("aria").close : void 0,
      onClick: hide
    }, ptm("closeButton"));
    var closeButton = props.fullScreen && React.createElement("button", closeButtonProps, closeIcon, React.createElement(Ripple, null));
    var header = createHeader();
    var footer = createFooter();
    var rootProps = mergeProps({
      ref: elementRef,
      id,
      className: classNames(props.className, cx("root", {
        context,
        thumbnailsPosClassName,
        indicatorPosClassName
      })),
      style: props.style,
      role: "region"
    }, GalleriaBase.getOtherProps(props), ptm("root"));
    var contentProps = mergeProps({
      className: cx("content"),
      "aria-live": props.autoPlay ? "polite" : "off"
    }, ptm("content"));
    var element = React.createElement("div", rootProps, closeButton, header, React.createElement("div", contentProps, React.createElement(GalleriaItem, {
      hostName: "Galleria",
      ref: previewContentRef,
      id,
      value: props.value,
      activeItemIndex,
      onActiveItemChange,
      itemTemplate: props.item,
      circular: props.circular,
      caption: props.caption,
      showIndicators: props.showIndicators,
      itemPrevIcon: props.itemPrevIcon,
      itemNextIcon: props.itemNextIcon,
      changeItemOnIndicatorHover: props.changeItemOnIndicatorHover,
      indicator: props.indicator,
      showItemNavigators: props.showItemNavigators,
      autoPlay: props.autoPlay,
      slideShowActive: slideShowActiveState,
      startSlideShow,
      stopSlideShow,
      ptm,
      cx
    }), props.showThumbnails && React.createElement(GalleriaThumbnails, {
      hostName: "Galleria",
      value: props.value,
      containerId: id,
      activeItemIndex,
      onActiveItemChange,
      itemTemplate: props.thumbnail,
      numVisible: numVisibleState,
      nextThumbnailIcon: props.nextThumbnailIcon,
      prevThumbnailIcon: props.prevThumbnailIcon,
      responsiveOptions: props.responsiveOptions,
      circular: props.circular,
      isVertical,
      contentHeight: props.verticalThumbnailViewPortHeight,
      showThumbnailNavigators: props.showThumbnailNavigators,
      autoPlay: props.autoPlay,
      slideShowActive: slideShowActiveState,
      stopSlideShow,
      isUnstyled,
      ptm,
      cx,
      sx
    })), footer);
    return element;
  };
  var createGalleria = function createGalleria2() {
    var element = createElement2();
    if (props.fullScreen) {
      var maskProps = mergeProps({
        className: cx("mask", {
          visibleState
        }),
        role: "dialog",
        "aria-modal": "true"
      }, ptm("mask"));
      var transitionProps = mergeProps({
        classNames: cx("transition"),
        "in": visibleState,
        timeout: {
          enter: 150,
          exit: 150
        },
        options: props.transitionOptions,
        unmountOnExit: true,
        onEnter,
        onEntering,
        onEntered,
        onExit,
        onExited
      }, ptm("transition"));
      var galleriaWrapper = React.createElement("div", _extends({
        ref: maskRef
      }, maskProps), React.createElement(CSSTransition, _extends({
        nodeRef: elementRef
      }, transitionProps), element));
      return React.createElement(Portal, {
        element: galleriaWrapper
      });
    }
    return element;
  };
  return ObjectUtils.isNotEmpty(props.value) && createGalleria();
}));
Galleria.displayName = "Galleria";
export {
  Galleria
};
//# sourceMappingURL=primereact_galleria.js.map
